import lammps_script_tools as script_tools
import lammps_structure_tools as structure_tools
import lammps_analysis_tools as analysis_tools
import numpy as np
import csv 

tetra_data_file = open("../exp_ctoa2.csv",'r') # 2 because I switched the order of something
reader = csv.reader(tetra_data_file)
tetra_data = []
for row in reader:
	tetra_data.append([float(i) for i in row])

lin_interp = lambda x0,y0,x1,y1,x: y0 + ((y1 - y0)/ (x1 - x0))*(x - x0)

def ctoa(temp): 
	if temp < tetra_data[0][0]: 
		return lin_interp(169,ctoa(169),185,ctoa(185),temp) 
		# extrapolates linearly
	for i in range(len(tetra_data)): 
		if tetra_data[i][0] >= temp: 
			t0, ca0 = tetra_data[i-1]
			t1,ca1 = tetra_data[i]
			return lin_interp(t0,ca0,t1,ca1,temp)


def abc_tetra(ctoa, volume = structure_tools.lx * structure_tools.ly * structure_tools.lz):
	a = (volume / (2**0.5 *ctoa) )**(1/3)
	return [a, ctoa * 2**0.5 * a, a]

temps = [100,140, 150, 160, 180,200,220, 260,300]

abc = {}

# from Baikie
abc[100] = [8.479, 12.4113, 8.739]
abc[120] = [8.457, 12.3811, 8.718]
abc[140] = [8.516,12.499, 8.786]
abc[150] = [8.655, 12.677, 8.905]

# from Weller et al
for t in [160, 180,200,220,260,300]: 
	abc[t] = abc_tetra(ctoa(t))


def make_ortho_cell(temp, Nx, Ny = None, Nz = None, write_struct = "", write_input = ""):
	if Ny is None: 
		Ny = Nx
	if Nz is None: 
		Nz = Nx
	struct = structure_tools.create_n_n_n_crystal(structure_tools.create_MAPbI3_supercell,Nx = Nx, Ny = Ny, Nz = Nz, lx = abc[temp][0], ly = abc[temp][1], lz = abc[temp][2])
	if write_struct:
		struct.write_structure_file(write_struct)
	if write_input:
		fix_type = "npt/iso" if Nx*Ny*Nz > 8 else "nvt"
		script_tools.restart_potential_run(write_struct, temp, timesteps = 60000,anneal_time = 300000, pot_style = "oldfiles",fix = fix_type, name = write_input,relax = "minimize", mode = "structure")
	return struct

def make_tilted_cell(temp, Nx, Ny = None, Nz = None, write_struct = "", write_input = "",ortho_cell_vect = "auto"):
	if ortho_cell_vect == "auto": 
		ortho_cell_vect = abc[temp]
	if Ny is None: 
		Ny = Nx
	if Nz is None: 
		Nz = Nx
	struct = structure_tools.create_n_n_n_tilted_crystal(Nx = Nx, Ny = Ny, Nz = Nz, lx_ortho = ortho_cell_vect[0], ly_ortho = ortho_cell_vect[1], lz_ortho = ortho_cell_vect[2])
	# atom positions? 
	if write_struct:
		struct.write_structure_file(write_struct)
	if write_input:
		steps = 5*60000 if Nx == 2 else 60000
		script_tools.restart_potential_run(write_struct, temp, timesteps = steps,anneal_time = 300000, pot_style = "oldfiles",fix = "nvt", name = write_input,relax = "minimize", mode = "structure")
	return struct

n6_cell_vects = {100 : np.array([ 8.61708985, 12.61343169,  8.88132424]),
120 : np.array([ 8.62625625, 12.62889219,  8.89247984]),
140 : np.array([ 8.61896476, 12.65012218,  8.89222926]),
150 : np.array([ 8.64103208, 12.65654115,  8.89062861]),
160 : np.array([ 8.78036679, 12.69179237,  8.78036679]),
180 : np.array([ 8.79136551, 12.69213912,  8.79136551]),
200 : np.array([ 8.80179557, 12.69404103,  8.80179557]),
220 : np.array([ 8.81507301, 12.69291933,  8.81507301]),
260 : np.array([ 8.8368591 , 12.68568012,  8.8368591 ]),
300 : np.array([ 8.86142894, 12.65655931,  8.86142894])}

"""
{100:[8.739, 12.4113,8.479], 140:[8.786,12.499, 8.516], 150:[8.905, 12.677, 8.655], 16
0:[8.696, 12.529,8.696], 180:[8.833, 12.764, 8.833], 298:[8.8519, 12.44413, 8.8519]}""" 

# exp_ctoa data, just in case
"""
168.83720930232556, 1.0215853658536584
171.62790697674419, 1.021260162601626
173.48837209302326, 1.0210975609756097
176.27906976744185, 1.0210975609756097
179.06976744186045, 1.0209349593495936
180.93023255813955, 1.0207723577235772
183.72093023255815, 1.0206097560975609
185.5813953488372, 1.0206097560975609
188.37209302325581, 1.0202845528455284
190.2325581395349, 1.0204471544715448
193.02325581395348, 1.020121951219512
195.81395348837208, 1.020121951219512
197.67441860465115, 1.0197967479674797
200.46511627906978, 1.0197967479674797
202.32558139534882, 1.0194715447154472
205.11627906976744, 1.0194715447154472
207.90697674418607, 1.0189837398373984
209.7674418604651, 1.0189837398373984
212.5581395348837, 1.0189837398373984
214.41860465116278, 1.0186585365853658
216.27906976744185, 1.0184959349593496
220, 1.018170731707317
221.86046511627907, 1.018170731707317
223.72093023255815, 1.0180081300813009
226.51162790697674, 1.0178455284552845
228.37209302325584, 1.0176829268292682
231.16279069767444, 1.017520325203252
233.95348837209303, 1.0173577235772358
235.81395348837208, 1.0170325203252033
238.60465116279067, 1.0170325203252033
240.46511627906978, 1.0167073170731706
243.25581395348837, 1.0163821138211382
246.04651162790697, 1.0163821138211382
247.90697674418607, 1.0160569105691057
249.7674418604651, 1.0158943089430894
252.5581395348837, 1.015731707317073
255.3488372093023, 1.0154065040650406
257.2093023255814, 1.0152439024390243
260, 1.0150813008130082
262.7906976744186, 1.0149186991869918
264.6511627906977, 1.0145934959349594
267.4418604651163, 1.0142682926829267
269.30232558139534, 1.0141056910569106
271.6279069767442, 1.013780487804878
273.95348837209303, 1.0135365853658536
276.74418604651163, 1.0132926829268292
279.06976744186045, 1.013130081300813
281.39534883720927, 1.0126422764227643
283.72093023255815, 1.0123983739837399
286.04651162790697, 1.0121544715447155
288.3720930232558, 1.0117479674796748
291.6279069767442, 1.011341463414634
293.48837209302326, 1.0110162601626016
295.3488372093023, 1.0106910569105692
298.13953488372096, 1.0102032520325204
300.4651162790698, 1.0098780487804877
300.93023255813955, 1.0098780487804877
302.7906976744186, 1.0095528455284553
305.1162790697674, 1.0093089430894309
307.4418604651163, 1.008821138211382
309.7674418604651, 1.0084146341463414
312.5581395348837, 1.0078455284552845
314.8837209302325, 1.0074390243902438
317.20930232558135, 1.006869918699187
319.53488372093017, 1.0063008130081301
321.860465116279, 1.005569105691057
324.1860465116278, 1.0049186991869918
326.5116279069767, 1.0042682926829267
329.3023255813953, 1.0030487804878048
331.6279069767441, 1.0010162601626016
"""